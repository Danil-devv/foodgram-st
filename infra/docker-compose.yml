version: '3.9'
services:
  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - pg_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=foodgram
      - POSTGRES_USER=foodgram_user
      - POSTGRES_PASSWORD=foodgram_password
    ports:
      - "5432:5432"

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    volumes:
      - backend_static:/app/static/
      - media_value:/app/media/
      - ../data/:/app/data/
    environment:
      - DEBUG=False
      - SECRET_KEY=some-secret-key
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - USE_POSTGRES=1
      - POSTGRES_DB=foodgram
      - POSTGRES_USER=foodgram_user
      - POSTGRES_PASSWORD=foodgram_password
      - DB_HOST=db
      - DB_PORT=5432
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py load_ingredients --file=/app/data/ingredients.json &&\
             python manage.py load_users --file=/app/data/users.json --media-dir=/app/data &&
             python manage.py load_recipes_full --file=/app/data/recipes_full.json --media-dir=/app/data &&
             python manage.py load_subscriptions --file=/app/data/subscriptions.json &&
             echo 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username=\"admin\").exists() or User.objects.create_superuser(username=\"admin\", email=\"admin@example.com\", password=\"admin\", first_name=\"admin\", last_name=\"Admin\")' | python manage.py shell &&
             gunicorn foodgram.wsgi:application --bind 0.0.0.0:8000"
    depends_on:
      - db

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    command: >
      cp -r /app/build /frontend
    volumes:
      - frontend_build:/frontend/build

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - frontend_build:/usr/share/nginx/html/
      - backend_static:/var/html/backend_static/
      - media_value:/var/html/media/
    depends_on:
      - backend
      - frontend

volumes:
  pg_data:
  frontend_build:
  backend_static:
  media_value:
